{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SACAD,EAAAE,OAAOC,KAAK,CAAEC,SAAS,IAEvB,IAAMC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,UAAWF,SAASC,cAAc,kBAGhCE,EAAa,GAGjBL,EAAKC,KAAKK,iBAAiB,SA6B3B,SAAwBC,GACtBF,EAAWE,EAAEC,OAAOC,MAAQF,EAAEC,OAAOE,SA7BvCV,EAAKC,KAAKK,iBAAiB,UAE3B,SAAsBC,GACpBA,EAAEI,iBACF,IAAIC,EAAW,EACXC,EAAeC,OAAOT,EAAWU,OACxBC,aAAY,WAyB3B,IAAuBC,EAAUF,EACzBG,GAzBJN,GAAY,GAEGP,EAAWc,UAsBPF,EApBLL,EAoBeG,EApBLF,EAqBpBK,EAAgBE,KAAKC,SAAW,GAE/B,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLP,EACFK,EAAQ,CAAEN,WAAUF,UAEpBS,EAAO,CAAEP,WAAUF,YAEpBA,OA7BAW,MAAK,SAAAC,G,IAAGV,EAAQU,EAARV,SAAUF,EAAKY,EAALZ,MACjBpB,EAAAE,OAAO+B,QAAQ,uBAAwCC,OAAfZ,EAAS,QAAYY,OAANd,EAAM,MAAK,CAC9De,QAAO,SAIZC,OAAM,SAAAJ,G,IAAGV,EAAQU,EAARV,SAAUF,EAAKY,EAALZ,MAClBpB,EAAAE,OAAOmC,QAAQ,sBAAqCH,OAAfZ,EAAS,QAAYY,OAANd,EAAM,MAAK,CAC7De,QAAS,SAIfjB,GAAgBC,OAAOT,EAAW4B,SACjC,M","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\nNotify.init({ useIcon: false });\n\nconst refs = {\n  form: document.querySelector('.form'),\n  createBtn: document.querySelector('[type=submit]'),\n};\n\nlet inputsData = {};\nlet intervalId = null;\n\nrefs.form.addEventListener('input', getInputsValue);\nrefs.form.addEventListener('submit', makePromises);\n\nfunction makePromises(e) {\n  e.preventDefault();\n  let position = 0;\n  let promiseDelay = Number(inputsData.delay);\n  intervalId = setInterval(() => {\n    position += 1;\n\n    if (position > inputsData.amount) return;\n\n    createPromise(position, promiseDelay)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`, {\n          timeout: 5000,\n        });\n      })\n\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`, {\n          timeout: 5000,\n        });\n      });\n\n    promiseDelay += Number(inputsData.step);\n  }, 0);\n}\n\nfunction getInputsValue(e) {\n  inputsData[e.target.name] = e.target.value;\n}\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$h6c0i","parcelRequire","Notify","init","useIcon","$ce04d3a99e08e73b$var$refs","form","document","querySelector","createBtn","$ce04d3a99e08e73b$var$inputsData","addEventListener","e","target","name","value","preventDefault","position1","promiseDelay","Number","delay","setInterval","position","shouldResolve","amount","Math","random","Promise","resolve","reject","setTimeout","then","param","success","concat","timeout","catch","failure","step"],"version":3,"file":"03-promises.f8285ac7.js.map"}